# -*- coding: utf-8 -*-
"""Capstone Project Data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kqyOvHVnu9Tpi5mlJNE8lroVyFy_7L9v
"""

!pip install replicate
!pip install langchain_community

from google.colab import userdata
import os
api_token = userdata.get('api_token')
os.environ["REPLICATE_API_TOKEN"] = api_token

from langchain_community.llms import Replicate

# Get the llm
llm = Replicate(model="ibm-granite/granite-3.3-8b-instruct")

# link dataset : https://www.kaggle.com/datasets/mehmetisik/amazon-review
import pandas as pd

data = pd.read_csv('amazon_review.csv')
data.head(5)

data.info()

data.isnull().sum()

# drop nilai null karena jumlah sedikit
data = data.dropna(subset=['reviewText'])
data = data.dropna(subset=['reviewerName'])

# LABELING manual berdasarkan kolom overall
def get_sentiment(score):
    if score <= 2:
        return "NEGATIVE"
    elif score == 3:
        return "NEUTRAL"
    else:
        return "POSITIVE"

data["sentiment_label"] = data["overall"].apply(get_sentiment)
data["sentiment_label"].value_counts()

# Preprocessing teks (reviewText)
import nltk, re
nltk.download("stopwords")
from nltk.corpus import stopwords

stop_words = set(stopwords.words("english"))

def clean_text(text):
    text = text.lower()
    text = re.sub(r"[^a-z\s]", "", text)  # hanya huruf
    text = " ".join([word for word in text.split() if word not in stop_words])
    return text

data["clean_review"] = data["reviewText"].apply(clean_text)
data[["reviewText", "clean_review"]].head()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(data=data, x="overall", palette="viridis")
plt.title("Distribusi Rating")
plt.show()

from wordcloud import WordCloud

positive_text = " ".join(data[data["sentiment_label"]=="POSITIVE"]["clean_review"])
negative_text = " ".join(data[data["sentiment_label"]=="NEGATIVE"]["clean_review"])

wordcloud_pos = WordCloud(width=800, height=400).generate(positive_text)
plt.imshow(wordcloud_pos, interpolation="bilinear")
plt.axis("off")
plt.title("WordCloud - Positive Reviews")
plt.show()

reviews = data["reviewText"].tolist()

def classify_with_granite(review):
    prompt = f"""
    Please classify this review to either positive negative, or neutral.
    Respond with label only.

    {review}
    """
    output = llm.invoke(prompt)   # sesuai cara kamu panggil Granite
    return str(output).strip()

data_sample = data.sample(50, random_state=42).copy()
data_sample["granite_sentiment"] = data_sample["reviewText"].apply(classify_with_granite)

# 5. Cek hasil
print(data_sample[["reviewText", "granite_sentiment"]].head())

data_sample.info()

data["granite_sentiment"] = data["reviewText"].dropna().apply(classify_with_granite)
data.to_csv("reviews_with_sentiment.csv", index=False)

"""note: proses seluruh data dengan ibm granite membutuhkan waktu yang cukup lama.


"""

data

accuracy = (data["granite_sentiment"].str.lower() == data["sentiment_label"].str.lower()).mean()
print("Akurasi Granite vs rating:", accuracy)

def extract_aspects(review):
    prompt = f"""
    Extract key product aspects mentioned in this review (like quality, price, battery, shipping, etc.).
    Respond in JSON format as a list of aspects only.

    Review: {review}
    """
    output = llm.invoke(prompt)
    return str(output).strip()

data_sample["granite_aspects"] = data_sample["reviewText"].apply(extract_aspects)
data_sample[["reviewText","granite_aspects"]].head()

reviews_text = " ".join(data_sample["reviewText"].tolist())

prompt = f"""
From the following customer reviews, summarize:
1. Top 5 positive themes customers like
2. Top 5 negative complaints customers mention
3. Suggest 3 actionable recommendations for the product team.

Reviews: {reviews_text}
"""

output = llm.invoke(prompt)
print(output)

prompt = f"""
You are an analyst. Summarize the customer reviews into a short report with:
- Overall sentiment percentage
- 3 bullet points for positives
- 3 bullet points for negatives
- 2 recommendations for product improvement

Here are the reviews: {reviews_text}
"""

output = llm.invoke(prompt)
print(output)

prompt = f"""
Based on these customer reviews, generate 5 short marketing taglines that highlight product strengths.
Reviews: {reviews_text}
"""
output = llm.invoke(prompt)
print(output)

data["year"] = pd.to_datetime(data["unixReviewTime"], unit="s").dt.year

for year in sorted(data["year"].unique()):
    sample_texts = " ".join(data[data["year"]==year]["reviewText"].sample(20, random_state=42).tolist())
    prompt = f"""
    Summarize the main customer sentiment and themes for reviews in {year}.
    Highlight 3 positives and 3 negatives.
    Reviews: {sample_texts}
    """
    output = llm.invoke(prompt)
    print(f"\n=== Year {year} ===\n", output)